/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * blog
 * Blog API
 * OpenAPI spec version: 0.1.0
 */
import * as axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  ArticleRequest,
  ArticleResponse,
  ListArticlesParams,
  ListingArticleResponse,
  User
} from './blog.schemas';




  export const getBlog = () => {
/**
 * List articles
 */
const listArticles = <TData = AxiosResponse<ListingArticleResponse>>(
    params: ListArticlesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/articles`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Create a new article
 */
const createArticle = <TData = AxiosResponse<ArticleResponse>>(
    articleRequest: ArticleRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/articles`,
      articleRequest,options
    );
  }

/**
 * Get a specific article
 */
const getArticle = <TData = AxiosResponse<ArticleResponse>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/articles/${id}`,options
    );
  }

/**
 * Permanently delete article
 */
const deleteArticle = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.delete(
      `/api/articles/${id}`,options
    );
  }

/**
 * Update article content
 */
const updateArticle = <TData = AxiosResponse<void>>(
    id: number,
    articleRequest: ArticleRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/articles/${id}`,
      articleRequest,options
    );
  }

/**
 * Set article to draft
 */
const moveArticleToDraft = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.put(
      `/api/articles/${id}/status/draft`,undefined,options
    );
  }

/**
 * Publish article
 */
const publishArticle = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.put(
      `/api/articles/${id}/status/publish`,undefined,options
    );
  }

/**
 * Move article to trash
 */
const moveArticleToTrash = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.put(
      `/api/articles/${id}/status/trash`,undefined,options
    );
  }

/**
 * Get current user status
 */
const me = <TData = AxiosResponse<User>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/auth/me`,options
    );
  }

return {listArticles,createArticle,getArticle,deleteArticle,updateArticle,moveArticleToDraft,publishArticle,moveArticleToTrash,me}};
export type ListArticlesResult = AxiosResponse<ListingArticleResponse>
export type CreateArticleResult = AxiosResponse<ArticleResponse>
export type GetArticleResult = AxiosResponse<ArticleResponse>
export type DeleteArticleResult = AxiosResponse<void>
export type UpdateArticleResult = AxiosResponse<void>
export type MoveArticleToDraftResult = AxiosResponse<void>
export type PublishArticleResult = AxiosResponse<void>
export type MoveArticleToTrashResult = AxiosResponse<void>
export type MeResult = AxiosResponse<User>
